"use client";
import React, { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";

export default function CheckFieldDetail() {
  const { fieldId } = useParams();
  const router = useRouter();
  const API_URL = process.env.NEXT_PUBLIC_API_URL;

  const [field, setField] = useState(null);
  const [editingField, setEditingField] = useState(null);
  const [updatedValue, setUpdatedValue] = useState("");
  const [subFields, setSubFields] = useState([]);
  const [addons, setAddons] = useState([]);
  const [newSubField, setNewSubField] = useState("");
  const [newAddon, setNewAddon] = useState({
    subFieldId: "",
    content: "",
    price: "",
  });
  const [newDocument, setNewDocument] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
  const [previewUrl, setPreviewUrl] = useState(null); // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á preview ‡∏£‡∏π‡∏õ

  useEffect(() => {
    if (!fieldId) return;
    const token = localStorage.getItem("token");
    fetch(`${API_URL}/field/${fieldId}`, { Authorization: `Bearer ${token}` })
      .then((res) => res.json())
      .then((data) => {
        setField(data);
        setSubFields(data.sub_fields || []);
      })
      .catch((error) => console.error("‚ùå Error fetching field:", error));
  }, [fieldId]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const startEditing = (fieldName, currentValue) => {
    setEditingField(fieldName);
    setUpdatedValue(currentValue);
  };

  const saveField = async (fieldName) => {
    try {
      // üìÅ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)
      if (fieldName === "img_field" || fieldName === "documents") {
        if (!selectedFile) {
          alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
          return;
        }

        const formData = new FormData();
        formData.append(fieldName, selectedFile); // ‚úÖ ‡∏™‡πà‡∏á File object ‡∏à‡∏£‡∏¥‡∏á

        const uploadEndpoint =
          fieldName === "img_field"
            ? `${API_URL}/field/${fieldId}/upload-image`
            : `${API_URL}/field/${fieldId}/upload-document`;

        const response = await fetch(uploadEndpoint, {
          method: "POST",
          body: formData,
        });

        let result = {};
        try {
          result = await response.json();
        } catch (err) {
          console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ:", err);
        }

        if (response.ok) {
          alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
          setField({ ...field, [fieldName]: result.path || selectedFile.name });
          setEditingField(null);
          setSelectedFile(null);
        } else {
          alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + (result.error || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"));
        }
        return;
      }

      // üìù ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï field ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå)
      const response = await fetch(`${API_URL}/field/edit/${fieldId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ [fieldName]: updatedValue }),
      });

      let result = {};
      try {
        result = await response.json();
      } catch (err) {
        console.error("‚ùå ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      }

      if (response.ok) {
        setField({ ...field, [fieldName]: updatedValue });
        setEditingField(null);
        alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + (result.error || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"));
      }
    } catch (error) {
      console.error("‚ùå Error saving field:", error);
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
    }
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° SubField
  const addSubField = async () => {
    try {
      const response = await fetch(`${API_URL}/subfield/${fieldId}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sub_field_name: newSubField }),
      });

      if (response.ok) {
        const newField = await response.json();
        setSubFields([...subFields, newField]);
        setNewSubField("");
      }
    } catch (error) {
      console.error("‚ùå Error adding subfield:", error);
    }
  };

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Addon ‡πÉ‡∏ô SubField
  const addAddon = async () => {
    try {
      const response = await fetch(`${API_URL}/addon`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newAddon),
      });

      if (response.ok) {
        alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Add-on ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setNewAddon({ subFieldId: "", content: "", price: "" });
      }
    } catch (error) {
      console.error("‚ùå Error adding addon:", error);
    }
  };

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
  const uploadDocument = async () => {
    if (!newDocument) {
      alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î");
      return;
    }

    const formData = new FormData();
    formData.append("documents", newDocument);

    try {
      const response = await fetch(
        `${API_URL}/field/${fieldId}/upload-document`,
        {
          method: "POST",
          body: formData,
        }
      );

      const result = await response.json();
      console.log("üìå Upload Response:", result);

      if (response.ok) {
        alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + result.error);
      }
    } catch (error) {
      console.error("‚ùå Error uploading document:", error);
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ");
    }
  };

  const handleChange = (e) => {
    const file = e.target.files[0];
    setSelectedFile(file); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö File object
    setUpdatedValue(file.name); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏¢ ‡πÜ
    setPreviewUrl(URL.createObjectURL(file)); // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á preview
  };

  const handleSubFieldChange = (index, key, value) => {
    const updated = [...subFields];
    updated[index][key] = value;
    setSubFields(updated); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÉ‡∏ô state
  };

  const saveSubField = async (sub) => {
    try {
      const response = await fetch(
        `${API_URL}/field/supfiled/${sub.sub_field_id}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            sub_field_name: sub.sub_field_name,
            price: sub.price,
            sport_id: sub.sport_id,
          }),
        }
      );

      const result = await response.json();
      console.log("üìå Response:", result);

      if (response.ok) {
        alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        setEditingField(null); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        setUpdatedValue("");
      } else {
        alert("‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " + (result.error || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏"));
      }
    } catch (error) {
      console.error("‚ùå Error saving subfield:", error);
      alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }
  };

  const cancelEditing = () => {
    setEditingField(null); // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    setUpdatedValue(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input
  };

  if (!field) return <p>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>;

  return (
    <div className="container">
      <h2>üìå ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤</h2>

      <div className="field-details">
        <label>üìç‡∏ä‡∏∑‡πà‡∏≠:</label>
        {editingField === "first_name" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("first_name")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.first_name || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button
              onClick={() => startEditing("first_name", field.first_name)}
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}
        <br />
        <label>üìç‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
        {editingField === "last_name" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("last_name")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.last_name || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button onClick={() => startEditing("last_name", field.last_name)}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìçemail</label>
        {editingField === "email" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("email")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.email || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button onClick={() => startEditing("email", field.email)}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìç ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°:</label>
        {editingField === "field_name" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("field_name")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.field_name || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button
              onClick={() => startEditing("field_name", field.field_name)}
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
        {editingField === "address" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("address")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.address || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button onClick={() => startEditing("address", field.address)}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìç‡∏û‡∏¥‡∏Å‡∏±‡∏î</label>
        {editingField === "gps_location" ? (
          <>
            <input
              type="time"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("address")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>
              <a
                href={field?.gps_location}
                target="_blank"
                rel="noopener noreferrer"
              >
                {field?.gps_location || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
              </a>
            </p>

            <button
              onClick={() => startEditing("gps_location", field.gps_location)}
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìç‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡πÄ‡∏õ‡∏¥‡∏î:</label>
        {editingField === "open_hours" ? (
          <>
            <input
              type="time"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("open_hours")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.open_hours || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button
              onClick={() => startEditing("open_hours", field.open_hours)}
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìç‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏õ‡∏¥‡∏î:</label>
        {editingField === "close_hours" ? (
          <>
            <input
              type="time"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("close_hours")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.close_hours || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button
              onClick={() => startEditing("close_hours", field.close_hours)}
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üìç ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏î‡∏à‡∏≥:</label>
        {editingField === "price_deposit" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("price_deposit")}>
              üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            </button>
            <button onClick={cancelEditing}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>
              {field.price_deposit === 0
                ? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏î‡∏à‡∏≥"
                : field.price_deposit || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
            </p>
            <button
              onClick={() => startEditing("price_deposit", field.price_deposit)}
            >
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>üè¶ ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</label>
        {editingField === "name_bank" ? (
          <>
            <input
              type="text"
              value={updatedValue}
              onChange={(e) => setUpdatedValue(e.target.value)}
            />
            <button onClick={() => saveField("name_bank")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>{field.name_bank || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
            <button onClick={() => startEditing("name_bank", field.name_bank)}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>‡∏£‡∏π‡∏õ:</label>
        {editingField === "img_field" ? (
          <>
            <input type="file" onChange={handleChange} />
            {previewUrl && <img src={previewUrl} alt="preview" />}
            <button onClick={() => saveField("img_field")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <p>
              <img
                src={`${API_URL}/${field.img_field}`} // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å path ‡∏ó‡∏µ‡πà backend ‡∏™‡πà‡∏á‡∏°‡∏≤
                alt="‡∏£‡∏π‡∏õ‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤"
                className="field-image"
              />
            </p>
            <button onClick={() => startEditing("img_field", field.img_field)}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:</label>
        {editingField === "documents" ? (
          <>
            <input type="file" onChange={handleChange} />
            <button onClick={() => saveField("documents")}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
            <button onClick={cancelEditing}> ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          </>
        ) : (
          <>
            <div>
              {" "}
              {field?.documents ? (
                <div className="document-container">
                  <a
                    href={`${API_URL}/${field.documents}`} //  ‡πÉ‡∏ä‡πâ Path ‡∏ó‡∏µ‡πà Backend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                    target="_blank"
                    rel="noopener noreferrer"
                    className="document-link"
                  >
                    <p>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤</p>
                    <div className="doc"></div>
                  </a>
                </div>
              ) : (
                <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö</p>
              )}
            </div>
            <button onClick={() => startEditing("documents", field.documents)}>
              ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            </button>
          </>
        )}

        <br />
        <label>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:</label>
        {subFields.map((sub, index) => (
          <div key={sub.sub_field_id} className="sub-field-card">
            <h2>‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢</h2>

            {editingField === "sub_fields" ? (
              <>
                <input
                  type="text"
                  value={sub.sub_field_name || ""}
                  onChange={(e) =>
                    handleSubFieldChange(
                      index,
                      "sub_field_name",
                      e.target.value
                    )
                  }
                />
                <input
                  type="number"
                  value={sub.price ?? ""}
                  onChange={(e) =>
                    handleSubFieldChange(index, "price", e.target.value)
                  }
                />
                <button onClick={() => saveSubField(sub)}>üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                <button onClick={cancelEditing}>‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
              </>
            ) : (
              <>
                <p>
                  <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏¢‡πà‡∏≠‡∏¢:</strong> {sub.sub_field_name}
                </p>
                <p>
                  <strong>‡∏£‡∏≤‡∏Ñ‡∏≤:</strong> {sub.price} ‡∏ö‡∏≤‡∏ó
                </p>
                <button
                  onClick={() => startEditing("sub_fields", sub.sub_field_name)}
                >
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
              </>
            )}
          </div>
        ))}

        <button onClick={() => router.push("/")} className="back-btn">
          üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        </button>
      </div>
    </div>
  );
}
