"use client";
import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation"; 
import "../css/Manager.css";

export default function AdminManager() {
  const [users, setUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);
  const API_URL = process.env.NEXT_PUBLIC_API_URL;
  const router = useRouter();

  useEffect(() => {
    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• currentUser
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      const user = JSON.parse(storedUser);
      setCurrentUser(user);
      
      // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin ‡πÉ‡∏´‡πâ Redirect ‡∏≠‡∏≠‡∏Å
      if (user.role !== "admin") {
        alert("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ!");
        router.push("/");
      }
    } else {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô!");
      router.push("/login");
    }
  }, []);

  useEffect(() => {
    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡πÄ‡∏°‡∏∑‡πà‡∏≠ currentUser ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô Admin
    if (currentUser?.role === "admin") {
      fetch(`${API_URL}/users`)
        .then((response) => response.json())
        .then((data) => setUsers(data))
        .catch((error) => console.error("Error fetching users:", error));
    }
  }, [currentUser]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const handleDelete = async (id) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ?")) return;
    try {
      await fetch(`${API_URL}/users/${id}`, { method: "DELETE" });
      setUsers(users.filter((user) => user.user_id !== id));
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  };

  // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ `customer` ‡πÄ‡∏õ‡πá‡∏ô `field_owner`
  const approveFieldOwner = async (id) => {
    try {
      await fetch(`${API_URL}/users/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ role: "field_owner" }),
      });
      setUsers(users.map((user) => (user.user_id === id ? { ...user, role: "field_owner" } : user)));
    } catch (error) {
      console.error("Error approving field owner:", error);
    }
  };

  return (
    <div className="admin-manager-container">
      <h2>üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)</h2>
{/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin */}
<h3>‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (Admin)</h3>
      <table>
        <thead>
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
          </tr>
        </thead>
        <tbody>
          {users.filter((user) => user.role === "admin").map((user) => (
            <tr key={user.user_id}>
              <td>{user.first_name} {user.last_name}</td>
              <td>{user.email}</td>
            </tr>
          ))}
        </tbody>
      </table>
      {/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Field Owner */}
      <h3>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤</h3>
      <table>
        <thead>
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤</th>
          </tr>
        </thead>
        <tbody>
          {users.filter((user) => user.role === "field_owner").map((user) => (
            <tr key={user.user_id}>
              <td>{user.first_name} {user.last_name}</td>
              <td>{user.email}</td>
              <td>
                <button className="edit-btn">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                <button className="delete-btn">‡∏•‡∏ö‡∏™‡∏ô‡∏≤‡∏°</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Customer ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏°‡∏≤ */}
      <h3>‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏ô‡∏≤‡∏°</h3>
      <table>
        <thead>
          <tr>
            <th>‡∏ä‡∏∑‡πà‡∏≠</th>
            <th>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
            <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
            <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody>
          {users.filter((user) => user.role === "field_owner").map((user) => (
            <tr key={user.user_id}>
              <td>{user.first_name} {user.last_name}</td>
              <td>{user.email}</td>
              <td>‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</td>
              <td>
                <button className="approve-btn" onClick={() => approveFieldOwner(user.user_id)}>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°</button>
                <button className="delete-btn" onClick={() => handleDelete(user.user_id)}>‡∏•‡∏ö</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      

      

      
    </div>
  );
}
